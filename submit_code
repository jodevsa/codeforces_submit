#!/usr/bin/env node
const request = require('request').defaults({jar:true});
const cheerio = require('cheerio');
const Promise = require('bluebird');
const path = require('path');
const WebSocket = require('ws');
var colors=require('colors');
var para=process.argv;
var filename=process.argv[process.argv.length-1];
var prob=process.argv[process.argv.length-2].toUpperCase();;

console.log(("<!>".blue+"   "+("FILE"+":"+filename).green)+(" PROBLEM:"+prob).green);
var fs=require('fs');

function options(){
  const options={
    gzip:true,
    followRedirect:false,
    headers:{
      'User-Agent': 'Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:48.0) Gecko/20100101 Firefox/48.0',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8'
    }
  }
  return  options;
}


function get_tokens(){
  return new Promise(function(resolve,reject){
    let http_options=options();
    http_options.url='http://codeforces.com/enter';
    http_options.method='GET';

    request(http_options,function(err,res,body){
      if(err){
        resolve(err);
        return ;
      }
      let $=cheerio.load(body);
      var csrf_token;
      $('meta').map(function(n,el){
        if($(el).attr('name')=='X-Csrf-Token'){
          csrf_token=$(el).attr('content');
          if(csrf_token==undefined){
            reject(new Error('csrf_token not found.'));
            return;
          }
          return resolve(csrf_token);

        }

      });



      //  console.log(body);
    })

  })

}

function login(username,password){


  return function(csrf_token){
    return new Promise(function(resolve,reject){
      let http_options=options();
      http_options.url='http://codeforces.com/enter';
      http_options.method='POST';
      http_options.headers['Content-Type']='application/x-www-form-urlencoded';
      http_options.body='csrf_token='+csrf_token+'&action=enter&handle='+username+'&password='+password;

      request(http_options,function(err,res,body){
        if(err){
          return reject(err);

        }
        if(res.statusCode=='200'){

          return reject(new Error('wrong handle or password.'))
        }
        resolve('looooool');
      });
    })
  }

}

function submit(file_path,problemId){

  return function(data){
    return new Promise(function(resolve,reject){
      var problem=problemId.substring(0,problemId.length-1);
      var problemIndex=problemId[problemId.length-1];

      var formData = {
        csrf_token:data.csrf_token,
        action:'submitSolutionFormSubmitted',
        submittedProblemIndex:problemIndex,
        source:'',
        programTypeId:'42',
        sourceFile: {
          value:  fs.createReadStream(file_path),
          options: {
            filename: path.basename(file_path),
            contentType: 'text/x-c++src'
          }
        }

      }

      request({method:'POST',url:'http://codeforces.com/problemset/problem/'+problem+'/'+problemIndex+'?csrf_token='+data.csrf_token,formData:formData},function(err,res,body){
        if(res.statusCode!='302'){
          return reject('Code submitted before!')
        }
        console.log("<!>".blue+"   code submitted!".green)
        let $=cheerio.load(body);

        fs.writeFile('a.html',body)


        resolve(data);
      })


    })
  }
}

function get_submission_token(problemId){

  return function(){
    return new Promise(function(resolve,reject){

      let http_options=options();

      http_options.url='http://codeforces.com/problemset/problem/'+problemId.substring(0,problemId.length-1)+'/'+problemId[problemId.length-1];
      http_options.method='GET';

      request(http_options,function(err,res,body){
        let $=cheerio.load(body);
        fs.writeFileSync('lol.html',body);
        if(err){
          return reject(err);
        }
        if(res.statusCode!='200'){
          return reject(new Error('problemset not found.'))
        }

        let csrf_token,uc,cc,pc;
        $('meta').map(function(n,el){
          if($(el).attr('name')=='uc'){
            uc=$(el).attr('content');
          }
          if($(el).attr('name')=='cc'){
            cc=$(el).attr('content');
          }
          if($(el).attr('name')=='pc'){
            pc=$(el).attr('content');
          }
          if($(el).attr('name')=='X-Csrf-Token'){
            csrf_token=$(el).attr('content');
            if(csrf_token==undefined){
              return reject(new Error('csrf_token not found.'));

            }


          }

        });

        resolve({csrf_token:csrf_token,uc:uc,cc:cc,pc:pc});





      })



    });
  }


}

function get_results(data){


  let http_options=options();
  http_options.url='http://pubsub2.codeforces.com/ws/'+data.uc+'/'+data.cc+'/'+data.pc+'?_=1472812847834&tag=&time=&eventid='

  const ws=new WebSocket(http_options.url);
  var x={};
  var counter=1;
  let done=false;
  ws.on('message', function(data, flags) {

  // flags.binary will be set if a binary data is received.
  // flags.masked will be set if the data was masked.
let test=JSON.parse(data);
var x=test.text;
var x=JSON.parse(x);

if(!done){
try{
  var results=x.d[6];

//console.log((x.d[4].toString().red+":"+x.d[6].toString()+" on test "+x.d[8].toString()));
if(results=='COMPILATION_ERROR' || results=='WRONG_ANSWER'){
  console.log("<!>".blue+"   "+(x.d[6].toString()+" on test "+x.d[8].toString()).red);
  var link='http://www.codeforces.com/contest/'+x.d[2]+'/submission/'+x.d[1];
  console.log("<!>".blue+"   "+link.red)
  ws.close();
  done=true;
}
if(results=='OK'){
  var link='http://www.codeforces.com/contest/'+x.d[2]+'/submission/'+x.d[1];
  console.log("<!>".blue+"   "+"Accepted".green);
  console.log("<!>".blue+"   "+link.green)
  ws.close();
  done=true;

}

}
catch(e){

}
}
});



}

get_tokens()
.then(login('sbhov','VRNhSky3LjczVAsAPDyH'))
.then(get_submission_token(prob))
.then(submit(filename,prob))
.then(get_results)
.catch(function(err){console.log("<!>".blue+"   "+err.red)})
